ðŸ”§ 1. Backend
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const jobRoutes = require('./routes/jobs');
const app = express();

app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser:true, useUnifiedTopology:true
}).then(() => console.log('MongoDB connected...'))
.catch(err => console.error(err));

// Route middlewares
app.use('/api/auth', authRoutes);
app.use('/api/jobs', jobRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true, required: true },
  password: String,
  role: { type: String, enum: ['client','freelancer'], default: 'freelancer' },
  skills: [String],
  bio: String
});
module.exports = mongoose.model('User', UserSchema);
const mongoose = require('mongoose');

const JobSchema = new mongoose.Schema({
  title: String,
  description: String,
  budget: Number,
  deadline: Date,
  category: String,
  client: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  applicants: [{
    freelancer: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    proposal: String,
    offeredBudget: Number
  }],
  status: { type: String, enum: ['open','assigned','closed'], default: 'open' }
}, { timestamps: true });

module.exports = mongoose.model('Job', JobSchema);
ðŸ“„ server/routes/auth.js
js
Copy
Edit
const router = require('express').Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Register
router.post('/register', async (req, res) => {
  const { name, email, password, role } = req.body;
  const salt = await bcrypt.genSalt(10);
  const hash = await bcrypt.hash(password, salt);
  const user = new User({ name, email, password: hash, role });
  try {
    await user.save();
    res.status(201).json({ msg: 'User registered' });
  } catch(e) {
    res.status(400).json({ error: e.message });
  }
});

// Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: 'Email not found' });
  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(400).json({ error: 'Invalid password' });

  const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET);
  res.json({ token, user: { id: user._id, name: user.name, role: user.role } });
});

module.exports = router;
ðŸ“„ server/routes/jobs.js
js
Copy
Edit
const router = require('express').Router();
const Job = require('../models/Job');
const verify = require('../middlewares/verifyToken');

// Post a new job (clients only)
router.post('/', verify, async (req, res) => {
  if (req.user.role !== 'client')
    return res.status(403).json({ error: 'Only clients can post jobs' });

  const job = new Job({
    ...req.body, client: req.user.id
  });
  await job.save();
  res.status(201).json(job);
});

// Get all jobs
router.get('/', async (req, res) => {
  const jobs = await Job.find().populate('client', 'name');
  res.json(jobs);
});

// Apply to job (freelancers only)
router.post('/:id/apply', verify, async (req, res) => {
  if (req.user.role !== 'freelancer')
    return res.status(403).json({ error: 'Only freelancers can apply' });

  const { proposal, offeredBudget } = req.body;
  const job = await Job.findById(req.params.id);
  job.applicants.push({
    freelancer: req.user.id,
    proposal,
    offeredBudget
  });
  await job.save();
  res.json(job);
});

module.exports = router;
ðŸ“„ server/middlewares/verifyToken.js
js
Copy
Edit
const jwt = require('jsonwebtoken');

module.exports = function(req, res, next) {
  const token = req.header('Authorization');
  if (!token) return res.status(401).json({ error: 'Access Denied' });

  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = verified;
    next();
  } catch(err) {
    res.status(400).json({ error: 'Invalid Token' });
  }
};
ðŸ’» 2. Frontend: client/
Bootstrapped with Create React App.

ðŸ“„ client/src/App.js
js
Copy
Edit
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Login from './pages/Login';
import Register from './pages/Register';
import JobList from './pages/JobList';
import NewJob from './pages/NewJob';
import ApplyJob from './pages/ApplyJob';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/login" component={Login}/>
        <Route path="/register" component={Register}/>
        <Route path="/jobs/new" component={NewJob}/>
        <Route path="/jobs/:id/apply" component={ApplyJob}/>
        <Route path="/" component={JobList}/>
      </Switch>
    </Router>
  );
}

export default App;
ðŸ“„ client/src/pages/JobList.js
js
Copy
Edit
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function JobList() {
  const [jobs,setJobs] = useState([]);
  useEffect(()=>{
    axios.get('/api/jobs')
      .then(res=>setJobs(res.data))
      .catch(console.error);
  }, []);
  return (
    <div>
      <h2>Available Jobs</h2>
      <ul>
        {jobs.map(j=>(
          <li key={j._id}>
            <a href={`/jobs/${j._id}/apply`}>{j.title}</a> by {j.client.name} â€”
            â‚¹{j.budget}
          </li>
        ))}
      </ul>
    </div>
  );
}
ðŸ“„ client/src/pages/NewJob.js
js
Copy
Edit
import React, { useState } from 'react';
import axios from 'axios';

export default function NewJob({history}) {
  const [data,setData] = useState({title:'',description:'',budget:'',deadline:'',category:''});
  const handle= e=> setData({...data,[e.target.name]:e.target.value});
  const submit= e=>{
    e.preventDefault();
    axios.post('/api/jobs',data,{
      headers: { Authorization: localStorage.getItem('token') }
    }).then(()=> history.push('/')).catch(console.error);
  };

  return (
    <form onSubmit={submit}>
      <h2>Post a New Job</h2>
      {['title','description','budget','deadline','category'].map(field=>(
        <div key={field}>
          <label>{field}:</label>
          <input name={field} value={data[field]} onChange={handle} required/>
        </div>
      ))}
      <button type="submit">Post Job</button>
    </form>
  );
}
ðŸ“„ client/src/pages/ApplyJob.js
js
Copy
Edit
import React,{useState,useEffect} from 'react';
import axios from 'axios';

export default function ApplyJob({ match, history }) {
  const [job, setJob] = useState(null);
  const [form, setForm] = useState({proposal:'',offeredBudget:''});
  
  useEffect(()=>{
    axios.get('/api/jobs').then(res=>{
      const j = res.data.find(x => x._id === match.params.id);
      setJob(j);
    });
  },[match.params.id]);

  const submit = e=> {
    e.preventDefault();
    axios.post(`/api/jobs/${match.params.id}/apply`, form, {
      headers: { Authorization: localStorage.getItem('token') }
    }).then(()=> history.push('/')).catch(console.error);
  };

  if (!job) return 'Loading...';
  
  return (
    <div>
      <h2>Apply to: {job.title}</h2>
      <form onSubmit={submit}>
        <div>
          <textarea
            name="proposal" placeholder="Your proposal" required
            value={form.proposal} onChange={e=>setForm({...form,proposal:e.target.value})}
          />
        </div>
        <div>
          <input
            name="offeredBudget" placeholder="Your Budget" type="number" required
            value={form.offeredBudget} onChange={e=>setForm({...form,offeredBudget:e.target.value})}
          />
        </div>
        <button type="submit">Submit Application</button>
      </form>
    </div>
  );
}
